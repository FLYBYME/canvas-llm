{
  "Create Controller": [
    "Define 1 component per file, recommended to be less than 400 lines of code.",
    "Define small functions, no more than 75 LOC (less is better).",
    "Use named functions instead of passing an anonymous function in as a callback.",
    "Use the controllerAs syntax over the classic controller with $scope syntax.",
    "Use a capture variable for this when using the controllerAs syntax.",
    "Use function declarations to hide implementation details.",
    "Defer logic in a controller by delegating to services and factories.",
    "Define a controller for a view, and try not to reuse the controller for other views.",
    "When a controller must be paired with a view and either component may be re-used by other controllers or views, define controllers along with their routes.",
    "Resolve start-up logic for a controller in an activate function.",
    "When a controller depends on a promise to be resolved before the controller is activated, resolve those dependencies in the $routeProvider before the controller logic is executed."
  ],
  "Create Service": [
    "Services are instantiated with the new keyword, use this for public methods and variables.",
    "Factories should have a single responsibility.",
    "Factories are singletons and return an object that contains the members of the service.",
    "Expose the callable members of the service at the top, using a technique derived from the Revealing Module Pattern.",
    "Refactor logic for making data operations and interacting with data to a factory.",
    "When calling a data service that returns a promise such as $http, return a promise in your calling function too.",
    "Always handle exceptions in services/factories."
  ],
  "Create Directive": [
    "Create one directive per file. Name the file for the directive.",
    "When manipulating the DOM directly, use a directive.",
    "Provide a short, unique, and descriptive directive prefix.",
    "When creating a directive that makes sense as a stand-alone element, allow restrict E (custom element) and optionally restrict A (custom attribute).",
    "Use controllerAs syntax with a directive to be consistent with using controller as with view and controller pairings.",
    "Use bindToController = true when using controller as syntax with a directive when you want to bind the outer scope to the directive's controller's scope."
  ],
  "Dependency Injection & Configuration": [
    "Avoid using the shortcut syntax of declaring dependencies without using a minification-safe approach.",
    "Use $inject to manually identify your dependencies for Angular components.",
    "Use $inject to manually identify your route resolver dependencies for Angular components.",
    "Use ng-annotate for Gulp or Grunt and comment functions that need automated dependency injection using /* @ngInject */.",
    "Use gulp-ng-annotate or grunt-ng-annotate in an automated build task."
  ],
  "Error Handling": [
    "The catch block of a promise must return a rejected promise to maintain the exception in the promise chain.",
    "Use a decorator, at config time using the $provide service, on the $exceptionHandler service to perform custom actions when exceptions occur.",
    "Create a factory that exposes an interface to catch and gracefully handle exceptions.",
    "Handle and log all routing errors using $routeChangeError."
  ],
  "Naming Conventions": [
    "Use consistent names for all components following a pattern that describes the component's feature then (optionally) its type.",
    "Name test specifications similar to the component they test with a suffix of spec.",
    "Use consistent names for all controllers named after their feature. Use UpperCamelCase for controllers, as they are constructors.",
    "Append the controller name with the suffix Controller.",
    "Use consistent names for all factories and services named after their feature. Use camel-casing for services and factories.",
    "Avoid prefixing factories and services with $. Only suffix service and factory names with Service when it is not clear what they are.",
    "Use consistent names for all directives using camelCase. Use a short prefix to describe the area that the directives belong.",
    "When there are multiple modules, the main module file is named app.module.js while other dependent modules are named after what they represent."
  ],
  "Project Structure": [
    "Separate configuration for a module into its own file named after the module.",
    "Separate route configuration into its own file.",
    "Structure your app such that you can Locate your code quickly, Identify the code at a glance, keep the Flattest structure you can, and Try to stay DRY.",
    "Place components that define the overall layout of the application in a folder named layout.",
    "Create folders named for the feature they represent. When a folder grows to contain more than 7 files, start to consider creating a folder for them.",
    "Create small modules that encapsulate one responsibility.",
    "Create an application root module whose role is to pull together all of the modules and features of your application.",
    "Only put logic for pulling together the app in the application module.",
    "Create modules that represent feature areas, such as layout, reusable and shared services, dashboards, and app-specific features (e.g. customers, admin, sales).",
    "Create modules that represent reusable application blocks for common services such as exception handling, logging, diagnostics, security, and local data stashing.",
    "The application root module depends on the app-specific feature modules and any shared or reusable modules."
  ],
  "Miscellaneous": [
    "Use $document and $window instead of document and window.",
    "Use $timeout and $interval instead of setTimeout and setInterval.",
    "If planning to produce documentation, use jsDoc syntax to document function names, descriptions, params, and returns.",
    "Create an Angular Constant for vendor libraries' global variables.",
    "Use constants for values that do not change and do not come from another service.",
    "Use file templates or snippets to help follow consistent styles and patterns.",
    "Use the HotTowel yeoman generator to create an app that serves as a starting point for Angular that follows this style guide.",
    "Use the AngularUI Router for client-side routing.",
    "Define routes for views in the module where they exist.",
    "Use task automation to list module definition files *.module.js before all other application JavaScript files.",
    "Avoid using filters for scanning all properties of a complex object graph. Use filters for select properties."
  ]
}